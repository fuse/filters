h1. Présentation

L'objectif de la bibliothèque filters est de faciliter le filtrage d'une 
collection d'objets ActiveRecord.

L'adaptation à d'autres ORM ne devrait pas être bien compliquée.

h1. Exemples

h2. Côté vue

<pre>
<% form_tag(bills_path, :method => :get) do -%>
<p>
	<%= label_tag "bill_created_at", "Créée à partir du" %>: 
	<%= filter_text_field :bill, :created_at, { :type => :ge }, { :class => "date" } %>
</p>

<p>
	<%= label_tag "bill_state", "Etat" %>
	<%= filter_select(:bill, :state, { :values => [["Payé", "paid"], ["Non payé", "unpaid"]] }) %>			
</p>	

<p>
	<%= label_tag "bill_reference", "Référence" %>
	<%= filter_text_field :bill, :reference %>
</p>

<p>
	<%= submit_tag "Filtrer" %>
</p>

<% end -%>
</pre>

h2. Côté controller

<pre>
def index
	@bills = Bill.filter(params)
end
</pre>

C'est tout.

h1. Avancé

h2. Associations

Filters permet aussi de filtrer sur des associations.
Par exemple pour chercher les factures d'un client:

<pre>
<p>
	<%= label_tag "company_name", "Client" %>: 
	<%= filter_text_field :company, :name, { :type => :rl }  %>
</p>
</pre>

Le type rl désigne un right like, c'est à dire que l'on aura du SQL du genre:
<pre>
company.name LIKE "foo%"
</pre>

La liste des types comprend:
* eq => equal, 
* ne => not equal, 
* li => left and right like, 
* ll => left like, 
* rl => right like, 
* gt => greater than, 
* lt => lower than, 
* ge => greater or equal than, 
* le => lower or equal than
L'option par défaut est eq.

L'option use_blank permet de spécifier si l'on doit quand même utiliser le 
filtre quand il est vide. Par défaut use_blank est à false.

h2. Filters fonctionne t-il avec will_paginate ?

Oui. Seule l'invocation côté controller change. De façon plus générale filter 
permet de repasser toutes les options d'un find classique.

<pre>
@bills = WillPaginate::Collection.create(params[:page] || 1, 10) do |pager|
	@bills_count = Bill.filter_count(params)
	results = Bill.filter(params, { :limit => pager.per_page, :offset => pager.offset })

	pager.replace(results)
	pager.total_entries = @bills_count
end
</pre>

h1. Limitations

Pour le moment Filters ne permet pas de définir des intervalles. 
La raison de cette limitation tient au fait que les noms des champs 
dans les vues sont mappés sur ceux de la table.
Pour remédier à cela il faudrait permettre en option de spécifier le nom du 
champ pour éviter des conflits tout en restant mappé sur le même champ de la 
table.

__Exemple__:

<pre>
<p>
	<%= label_tag "bill_created_at_after", "Créée entre le:" %>: 
	<%= filter_text_field :bill, :created_at, { :type => :ge, :name => "bill_created_at_after" }  %>
</p>

<p>
	<%= label_tag "bill_created_at_before", "et le:" %>: 
	<%= filter_text_field :bill, :created_at, { :type => :le, :name => "bill_created_at_before" } %>
</p>
</pre>

Un problème du même type existe pour les associations. Si le nom d'une 
association ne mappe pas directement le nom d'un modèle cela ne fonctionnera 
pas.

Par exemple le modèle bill peut avoir un 
<pre>
belongs_to :sender
</pre> 
et un 
<pre>
belongs_to :receiver
</pre>
où sender et receiver sont des instances du modèle Company.

Il faudrait donc dans la même idée une option permettant de spécifier le nom du 
modèle:
<pre>
<p>
	<%= label_tag "receiver_name", "Client" %>: 
	<%= filter_text_field :receiver, :name, { :type => :rl, :association_name => "Company" }  %>
</p>
</pre>